#include <furi.h>

#include "fz++/gui/gui.h"
#include "fz++/gui/popup.h"
#include "fz++/gui/menu.h"
#include "fz++/gui/icon.h"
#include "fz++/gui/scene_manager.h"
#include "fz++/gui/view_dispatcher.h"

#define TAG "test-app"

/* generated by fbt from .png files in images folder */
#include <test_app_icons.h>

/** the app context struct */
struct TestApp {
    /** ids for all scenes used by the app */
    enum { Scene_MainMenu, Scene_FirstPopup, Scene_SecondPopup, Scene_count };

    /** ids for the 2 types of view used by the app */
    enum { View_Menu, View_Popup };

    /** all custom events */
    enum { Event_ShowPopupOne, Event_ShowPopupTwo };

    /** indices for menu items */
    enum { MenuSelection_One, MenuSelection_Two };

    TestApp();
    ~TestApp();

    gui::SceneManager scene_manager;
    gui::ViewDispatcher view_dispatcher;
    gui::Menu menu;
    gui::Popup popup;
};

/* main menu scene */

struct MainMenuScene {
    /** resets the menu, gives it content, callbacks and selection enums */
    static void OnEnter(void* context) {
        FURI_LOG_T(TAG, "test_app_scene_on_enter_main_menu");
        TestApp* app = static_cast<TestApp*>(context);
        app->menu.Reset();

        // NB. icons are specified as null below, because:
        // * icons are _always_ animated by the menu
        // * the icons provided (&I_one, &I_two) are generated by the build process
        // * these icons do not have a framerate (resulting in a division by zero)
        app->menu.AddItem(
            "1st popup", nullptr, TestApp::MenuSelection_One, &MainMenuScene::OnMenuChoice, app);
        app->menu.AddItem(
            "2nd popup", nullptr, TestApp::MenuSelection_Two, &MainMenuScene::OnMenuChoice, app);
        app->view_dispatcher.SwitchToView(TestApp::View_Menu);
    }

    /** main menu callback - sends a custom event to the scene manager based on the menu selection */
    static void OnMenuChoice(void* context, uint32_t index) {
        FURI_LOG_T(TAG, "test_app_menu_callback_main_menu");
        TestApp* app = static_cast<TestApp*>(context);
        switch(index) {
        case TestApp::MenuSelection_One:
            app->scene_manager.HandleCustomEvent(TestApp::Event_ShowPopupOne);
            break;
        case TestApp::MenuSelection_Two:
            app->scene_manager.HandleCustomEvent(TestApp::Event_ShowPopupTwo);
            break;
        }
    }

    /** main menu event handler - switches scene based on the event */
    static bool OnEvent(void* context, gui::Scene::Event event) {
        FURI_LOG_T(TAG, "test_app_scene_on_event_main_menu");
        TestApp* app = static_cast<TestApp*>(context);
        bool consumed = false;
        switch(event.type) {
        case gui::Scene::Event::Type::Custom:
            switch(event.event) {
            case TestApp::Event_ShowPopupOne:
                app->scene_manager.NextScene(TestApp::Scene_FirstPopup);
                consumed = true;
                break;
            case TestApp::Event_ShowPopupTwo:
                app->scene_manager.NextScene(TestApp::Scene_SecondPopup);
                consumed = true;
                break;
            }
            break;
        default: // eg. Scene::Event::TypeBack, Scene::Manager::EventTypeTick
            consumed = false;
            break;
        }
        return consumed;
    }

    static void OnExit(void* context) {
        FURI_LOG_T(TAG, "test_app_scene_on_exit_main_menu");
        TestApp* app = static_cast<TestApp*>(context);
        app->menu.Reset();
    }
};

/* popup 1 scene */

struct PopupOneScene {
    static void OnEnter(void* context) {
        FURI_LOG_T(TAG, "test_app_scene_on_enter_popup_one");
        TestApp* app = static_cast<TestApp*>(context);
        app->popup.Reset();
        app->popup.SetContext(app);
        app->popup.SetHeader("Popup One", 64, 10, AlignCenter, AlignTop);
        app->popup.SetIcon(10, 10, &I_cvc_36x36);
        app->popup.SetText("One! One popup. Ah ah ah...", 64, 20, AlignLeft, AlignTop);
        app->view_dispatcher.SwitchToView(TestApp::View_Popup);
    }

    static bool OnEvent(void* context, gui::Scene::Event event) {
        FURI_LOG_T(TAG, "test_app_scene_on_event_popup_one");
        UNUSED(context);
        UNUSED(event);
        return false; // don't handle any events
    }

    static void OnExit(void* context) {
        FURI_LOG_T(TAG, "test_app_scene_on_exit_popup_one");
        TestApp* app = static_cast<TestApp*>(context);
        app->popup.Reset();
    }
};

/* popup 2 scene */

struct PopupTwoScene {
    static void OnEnter(void* context) {
        FURI_LOG_T(TAG, "test_app_scene_on_enter_popup_two");
        TestApp* app = static_cast<TestApp*>(context);
        app->popup.Reset();
        app->popup.SetContext(app);
        app->popup.SetHeader("Popup Two", 64, 10, AlignCenter, AlignTop);
        app->popup.SetIcon(10, 10, &I_cvc_36x36);
        app->popup.SetText("Two! Two popups. (press back)", 64, 20, AlignLeft, AlignTop);
        app->view_dispatcher.SwitchToView(TestApp::View_Popup);
    }

    static bool OnEvent(void* context, gui::Scene::Event event) {
        FURI_LOG_T(TAG, "test_app_scene_on_event_popup_two");
        UNUSED(context);
        UNUSED(event);
        return false; // don't handle any events
    }

    static void OnExit(void* context) {
        FURI_LOG_T(TAG, "test_app_scene_on_exit_popup_two");
        TestApp* app = static_cast<TestApp*>(context);
        app->popup.Reset();
    }
};

/** collection of all scene on_enter handlers - in the same order as their enum */
gui::Scene::OnEnterCallback test_app_scene_on_enter_handlers[] = {
    &MainMenuScene::OnEnter,
    &PopupOneScene::OnEnter,
    &PopupTwoScene::OnEnter,
};

/** collection of all scene on event handlers - in the same order as their enum */
gui::Scene::OnEventCallback test_app_scene_on_event_handlers[] = {
    &MainMenuScene::OnEvent,
    &PopupOneScene::OnEvent,
    &PopupTwoScene::OnEvent,
};

/** collection of all scene on exit handlers - in the same order as their enum */
gui::Scene::OnExitCallback test_app_scene_on_exit_handlers[] = {
    &MainMenuScene::OnExit,
    &PopupOneScene::OnExit,
    &PopupTwoScene::OnExit,
};

/** collection of all on_enter, on_event, on_exit handlers */
const gui::SceneManager::Handlers test_app_scene_event_handlers = {
    .on_enter_handlers = test_app_scene_on_enter_handlers,
    .on_event_handlers = test_app_scene_on_event_handlers,
    .on_exit_handlers = test_app_scene_on_exit_handlers,
    .scene_num = TestApp::Scene_count};

/** custom event handler - passes the event to the scene manager */
bool test_app_scene_manager_custom_event_callback(
    void* context,
    gui::ViewDispatcher::Event custom_event) {
    FURI_LOG_T(TAG, "test_app_scene_manager_custom_event_callback");
    furi_assert(context);
    TestApp* app = static_cast<TestApp*>(context);
    return app->scene_manager.HandleCustomEvent(custom_event);
}

/** navigation event handler - passes the event to the scene manager */
bool test_app_scene_manager_navigation_event_callback(void* context) {
    FURI_LOG_T(TAG, "test_app_scene_manager_navigation_event_callback");
    furi_assert(context);
    TestApp* app = static_cast<TestApp*>(context);
    return app->scene_manager.HandleBackEvent();
}

/** initialise the views, and initialise the view dispatcher with all views */
void test_app_view_dispatcher_init(TestApp* app) {
    FURI_LOG_T(TAG, "test_app_view_dispatcher_init");
    app->view_dispatcher.EnableQueue();

    // assign callback that pass events from views to the scene manager
    FURI_LOG_D(TAG, "test_app_view_dispatcher_init setting callbacks");
    app->view_dispatcher.SetEventCallbackContext(app);
    app->view_dispatcher.SetCustomEventCallback(test_app_scene_manager_custom_event_callback);
    app->view_dispatcher.SetNavigationEventCallback(
        test_app_scene_manager_navigation_event_callback);

    // add views to the dispatcher, indexed by their enum value
    FURI_LOG_D(TAG, "test_app_view_dispatcher_init adding view menu");
    app->view_dispatcher.AddView(TestApp::View_Menu, app->menu.GetView());

    FURI_LOG_D(TAG, "test_app_view_dispatcher_init adding view popup");
    app->view_dispatcher.AddView(TestApp::View_Popup, app->popup.GetView());
}

/** initialise app data, scene manager, and view dispatcher */
TestApp::TestApp()
    : scene_manager(&test_app_scene_event_handlers, this) {
    FURI_LOG_T(TAG, "test_app_init");
    test_app_view_dispatcher_init(this);
}

/** free all app data, scene manager, and view dispatcher */
TestApp::~TestApp() {
    FURI_LOG_T(TAG, "test_app_free");
    view_dispatcher.RemoveView(TestApp::View_Menu);
    view_dispatcher.RemoveView(TestApp::View_Popup);
}

/** go to trace log level in the dev environment */
void test_app_set_log_level() {
#ifdef FURI_DEBUG
    furi_log_set_level(FuriLogLevelTrace);
#else
    furi_log_set_level(FuriLogLevelInfo);
#endif
}

/** entrypoint */
int32_t real_entry(void* p) {
    UNUSED(p);
    test_app_set_log_level();

    // create the app context struct, scene manager, and view dispatcher
    FURI_LOG_I(TAG, "Test app starting...");
    TestApp app;

    // set the scene and launch the main loop
    Gui* gui = static_cast<Gui*>(furi_record_open(RECORD_GUI));
    app.view_dispatcher.AttachToGui(gui, gui::ViewDispatcher::Type::Fullscreen);
    app.scene_manager.NextScene(TestApp::Scene_MainMenu);
    FURI_LOG_D(TAG, "Starting dispatcher...");
    app.view_dispatcher.Run();

    // free all memory
    FURI_LOG_I(TAG, "Test app finishing...");
    furi_record_close(RECORD_GUI);
    return 0;
}

extern "C" {
int32_t test_app_app(void* p) {
    return real_entry(p);
}
}
